{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleSubmit","preventDefault","_this$state","length","props","addTask","alert","maxDate","this","react_default","a","createElement","className","htmlFor","onChange","id","type","placeholder","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","src_components_Task","key","doneTasks","Fragment","App","counter","deleteTask","newTasks","Object","toConsumableArray","el","changeTaskStatus","Array","from","forEach","getTime","prev","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15fdcf51.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n\r\n  minDate = new Date().toISOString().slice(0,10);\r\n  state = { \r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n   }\r\n\r\n   handleText = (e) =>{\r\n     this.setState({\r\n       text: e.target.value,\r\n     })\r\n   }\r\n\r\n   handleCheckbox = (e) =>{\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    })\r\n  }\r\n\r\n  handleDate = (e) =>{\r\n    this.setState({\r\n      date: e.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n    const {text, checked, date} = this.state;\r\n    if(text.length>2){\r\n    const add = this.props.addTask(text, date, checked);\r\n    if(add){\r\n      this.setState({\r\n        text: \"\",\r\n        checked: false,\r\n        date: this.minDate,\r\n      })\r\n    }\r\n  } else {\r\n    alert(\"Za kr√≥tka nazwa\")\r\n  }\r\n}\r\n\r\n  render() { \r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate+\"-12-31\";\r\n\r\n    return ( \r\n      <div className=\"form\">\r\n        <div>\r\n          <form>\r\n          <label htmlFor=\"task\">Enter the task name:\r\n            <input \r\n            value={this.state.text} \r\n            onChange={this.handleText}\r\n            id=\"task\"\r\n            type=\"text\" \r\n            placeholder=\"add some task...\"/>\r\n          </label>\r\n\r\n            <label htmlFor=\"important\">\r\n            <input \r\n            onChange={this.handleCheckbox}\r\n            checked={this.state.checked}\r\n            id=\"important\"\r\n            type=\"checkbox\" /> Priority\r\n            </label>\r\n\r\n            <br/>\r\n\r\n            <label htmlFor=\"date\">Until:\r\n            <input \r\n            onChange={this.handleDate}\r\n            type=\"date\" \r\n            value={this.state.date} \r\n            min={this.minDate} \r\n            max={maxDate} />\r\n            </label>\r\n\r\n            <button onClick={this.handleSubmit}>Add</button>\r\n            </form>\r\n            </div> \r\n       \r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default AddTask;","import React from 'react';\r\nimport \"./Task.css\";\r\n\r\nconst Task = props => {\r\n  const style = { color: '#EB4A4A' };\r\n\r\n  const { id, text, date, active, important, finishDate} = props.task;\r\n  if(active){\r\n  return ( \r\n    <div className=\"taskToDo\">\r\n      <p>\r\n      <strong style={important ? style : null}>{text}</strong> - to <span>{date} </span>\r\n      <button onClick={() => props.change(id)}> Done!</button>\r\n      <button  onClick={() => props.delete(id)}><strong> X</strong></button>\r\n      </p>\r\n    </div>\r\n   );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div className=\"taskDone\">\r\n      <p>\r\n      <strong>{text}</strong> -  <em>completed on: {finish} </em>\r\n      <button onClick={() => props.delete(id)}>X</button>\r\n      </p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\nimport './TaskList.css';\r\n\r\nconst TaskList = props => {\r\n\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n  \r\n  // done.sort((a,b) => b.finishDate - a.finishDate);\r\n  if(done.length>-2){\r\n    done.sort((a,b)=>{\r\n      if(a.finishDate < b.finishDate){\r\n        return 1\r\n      }\r\n      if(a.finishDate > b.finishDate){\r\n        return -1\r\n      }\r\n      return 0\r\n    })\r\n }\r\n\r\n if(active.length >= 2){\r\n   active.sort((a,b) => {\r\n     a = a.text.toLowerCase();\r\n     b = b.text.toLowerCase();\r\n      if(a < b) return -1;\r\n      if(a > b) return 1;\r\n      return 0\r\n    \r\n   })\r\n }\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>);\r\n\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} />);\r\n\r\n  return ( \r\n    <>\r\n    <div className=\"active\">\r\n      <h2>You have to do... </h2>\r\n      {activeTasks.length > 0 ? activeTasks : <span className=\"info\">You don't have things to do!</span>}\r\n    </div>\r\n\r\n    <hr/>\r\n\r\n    <div className=\"done\">\r\n    <h3>The task, which you have done <em>( {done.length} )</em> </h3>\r\n    {doneTasks.length > 1 && <span className=\"info\">We display max. 5 tasks.</span> }\r\n    {doneTasks.slice(0, 3)}\r\n    \r\n  </div>\r\n  </>\r\n   );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends Component {\n\n  counter = 2;\n  state = {\n    tasks: [\n      {\n        id:0,\n        text: \"example with priority\",\n        date: '2019-08-15',\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id:1,\n        text: \"example number 1\",\n        date: '2019-08-15',\n        important: false,\n        active: true,\n        finishDate: null\n      },\n    ]\n  }\n\n  deleteTask = (id) => {\n   let tasks = [...this.state.tasks];\n\n  //  const index = tasks.findIndex(task => tasks.id === id);\n  //  deletetask = tasks.splice(index, 1)\n\n   let newTasks = tasks.filter(el => el.id !== id);\n   this.setState({\n    tasks : newTasks\n   })\n  }\n\n  changeTaskStatus = (id) =>{\n    \n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if(task.id === id){\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    })\n    this.setState({\n      tasks,\n    })\n  }\n\n  addTask = (text, date, important) =>{\n    const task = {\n        id:this.counter,\n        text,\n        date,\n        important,\n        active: true,\n        finishDate: null\n    }\n    this.counter++;\n\n    this.setState((prev)=>({\n      tasks: [...prev.tasks, task],\n    }))\n\n    return true\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n      <div className=\"logo\">\n      <p>TO DO APP </p>\n      <p>You can do it!!!</p>\n      <hr />\n      </div>\n      <AddTask addTask={this.addTask}/>\n      <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}